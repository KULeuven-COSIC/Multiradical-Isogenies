/*
 The following are all the relevant formulae for the example of radical isogenies
 in case of g = 2 and N = 5. Notation is similar as in the associated paper and
 running the script should take less than a minute.
*/

K<z> := CyclotomicField(5);
R<x> := PolynomialRing(K);

gamma1 := 2*z^3 + 2*z^2 + 1;
assert gamma1^2 eq 5;

f := x^5 + 25*x^4 - 200*x^3 + 560*x^2 - 640*x + 256;
C := HyperellipticCurve(f);
J := Jacobian(C);
inf := PointsAtInfinity(C)[1];

P1 := [4, 16*gamma1];
P2 := [0, 16];

T1 := C ! P1 - inf;
T2 := C ! P2 - inf;

assert T1 ne J ! 0 and 5*T1 eq J ! 0;
assert T2 ne J ! 0 and 5*T2 eq J ! 0;
assert T2 notin {k*T1 : k in [1..4]};

gamma2 := (2*z^3 - 6*z^2 - 4*z - 2)/5;
assert gamma2^2 eq 2*(1/gamma1 - 1);

f_ := x^5 - 125*x^4 + 5000*x^3 - 175000*x^2 + 1250000*x - 81250000;
C_ := HyperellipticCurve(f_);
J_ := Jacobian(C_);
inf_ := PointsAtInfinity(C_)[1];

P1_ := [10*gamma1, 10000*gamma2];
P2_ := [-10*gamma1, 5000*gamma2*(gamma1+1)];

T1_ := C_ ! P1_ - inf_;
T2_ := C_ ! P2_ - inf_;

assert T1_ ne J_ ! 0 and 5*T1_ eq J_ ! 0;
assert T2_ ne J_ ! 0 and 5*T2_ eq J_ ! 0;
assert T2_ notin {k*T1_ : k in [1..4]};

/*
 The following Fi are representations of 5*Ti,
 which allows us to easily compute the needed Tate pairings.
*/

R2<X,Y> := PolynomialRing(K,2);
F1 := Y - gamma1 * (3*X^2 - 12*X + 16);
F2 := Y - (5*X^2 - 20*X + 16);

p11 := Evaluate(F1, [P1[1], -P1[2]]);
p12 := Evaluate(F1, P2);
p22 := Evaluate(F2, [P2[1], -P2[2]]);

assert p11 eq -32*gamma1;
assert p12 eq -32*(gamma1-1)/2;
assert p22 eq -32;

rho1 := gamma1;
rho2 := (gamma1-1)/2;

K1<alpha1> := ext<K | x^5 - rho1>;
K2<alpha2> := ext<K1 | x^5 - rho2>;
R<x> := PolynomialRing(K2);

C_ := BaseChange(C_, K2);
J_ := BaseChange(J_, K2);
inf_ := PointsAtInfinity(C_)[1];
T1_ := C_ ! P1_ - inf_;
T2_ := C_ ! P2_ - inf_;

T3_ := J_ ! [x^2 + ((60*z^2 - 20*z + 60)*alpha2^4 + (-40*z^3 - 20*z^2 - 40*z)*alpha2^3 + (60*z^3 +
    20*z + 20)*alpha2^2 + (-40*z^3 - 60*z^2 - 60*z - 40)*alpha2 - 100)*x + (-3000*z^2 +
    1000*z - 3000)*alpha2^4 + (-2000*z^3 + 1000*z^2 - 2000*z)*alpha2^3 + (1000*z^3 -
    1000*z - 1000)*alpha2^2 + (2000*z^3 + 3000*z^2 + 3000*z + 2000)*alpha2 + 500,
    ((700*z^2 - 100*z + 700)*alpha2^4 + (-200*z^3 - 500*z^2 - 200*z)*alpha2^3 + (700*z^3
    + 500*z + 500)*alpha2^2 + (-600*z^3 - 700*z^2 - 700*z - 600)*alpha2 - 700)*x +
    (-15000*z^2 - 15000*z - 15000)*alpha2^4 + (-10000*z^3 + 5000*z^2 - 10000*z)*alpha2^3
    + (5000*z^3 - 5000*z - 5000)*alpha2^2 + (30000*z^3 + 15000*z^2 + 15000*z +
    30000)*alpha2 - 25000];

T4_ := J_ ! [x^2 + ((1/4*(5*z^2 - 45*z + 5)*alpha2^4 + 1/4*(-110*z^2 + 95*z - 110)*alpha2^3 +
    1/4*(95*z^2 + 110*z + 95)*alpha2^2 + 1/4*(45*z^2 + 5*z + 45)*alpha2 - 25/4*z)*alpha1^4 +
    (1/4*(55*z^3 - 85*z^2 + 55*z)*alpha2^4 + 1/4*(-60*z^3 + 5*z^2 - 60*z)*alpha2^3 +
    1/4*(-5*z^3 - 60*z^2 - 5*z)*alpha2^2 + 1/4*(-85*z^3 - 55*z^2 - 85*z)*alpha2 +
    1/4*(130*z^3 + 65*z^2 + 130*z))*alpha1^3 + (1/4*(70*z^3 + 55*z + 55)*alpha2^4 +
    1/4*(-15*z^3 - 10*z - 10)*alpha2^3 + 1/4*(-5*z^3 + 5*z + 5)*alpha2^2 + 1/4*(-40*z^3
    + 15*z + 15)*alpha2 - 125/4*z^3)*alpha1^2 + (1/4*(-20*z^3 - 55*z^2 - 55*z - 20)*alpha2^4
    + 1/4*(-165*z^3 - 185*z^2 - 185*z - 165)*alpha2^3 + 1/4*(-205*z^3 - 20*z^2 -
    20*z - 205)*alpha2^2 + 1/4*(90*z^3 + 35*z^2 + 35*z + 90)*alpha2 + 1/4*(5*z^3 - 5*z^2
    - 5*z + 5))*alpha1 + (1/4*(-125*z^3 - 125*z^2 - 210)*alpha2^4 + 1/4*(110*z^3 +
    110*z^2 + 85)*alpha2^3 + 1/4*(25*z^3 + 25*z^2 + 135)*alpha2^2 + 1/4*(-85*z^3 -
    85*z^2 + 40)*alpha2 + 15/4))*x + (1/2*(375*z^2 + 625*z + 375)*alpha2^4 +
    1/2*(1350*z^2 - 75*z + 1350)*alpha2^3 + 1/2*(-75*z^2 - 1350*z - 75)*alpha2^2 +
    1/2*(-625*z^2 + 375*z - 625)*alpha2 + 2125/2*z)*alpha1^4 + (1/2*(-675*z^3 - 775*z^2
    - 675*z)*alpha2^4 + 1/2*(300*z^3 - 1225*z^2 + 300*z)*alpha2^3 + 1/2*(1225*z^3 +
    300*z^2 + 1225*z)*alpha2^2 + 1/2*(-775*z^3 + 675*z^2 - 775*z)*alpha2 +
    1/2*(-1450*z^3 - 725*z^2 - 1450*z))*alpha1^3 + (1/2*(450*z^3 - 1475*z -
    1475)*alpha2^4 + 1/2*(-4325*z^3 - 3150*z - 3150)*alpha2^3 + 1/2*(-1975*z^3 + 1175*z
    + 1175)*alpha2^2 + 1/2*(3400*z^3 + 1925*z + 1925)*alpha2 + 2625/2*z^3)*alpha1^2 +
    (1/2*(-1500*z^3 - 125*z^2 - 125*z - 1500)*alpha2^4 + 1/2*(3625*z^3 + 2125*z^2 +
    2125*z + 3625)*alpha2^3 + 1/2*(625*z^3 - 1500*z^2 - 1500*z + 625)*alpha2^2 +
    1/2*(-1250*z^3 - 1375*z^2 - 1375*z - 1250)*alpha2 + 1/2*(375*z^3 - 375*z^2 -
    375*z + 375))*alpha1 + 1/2*(-1375*z^3 - 1375*z^2 + 250)*alpha2^4 + 1/2*(-3750*z^3 -
    3750*z^2 - 5625)*alpha2^3 + 1/2*(1875*z^3 + 1875*z^2 - 1875)*alpha2^2 +
    1/2*(1625*z^3 + 1625*z^2 + 3000)*alpha2 + 4125/2,
    ((1/8*(1875*z^2 + 775*z + 1875)*alpha2^4 + 1/8*(900*z^2 + 25*z + 900)*alpha2^3 +
    1/8*(-25*z^2 + 900*z - 25)*alpha2^2 + 1/8*(775*z^2 - 1875*z + 775)*alpha2 +
    1/8*(-950*z^2 - 475*z - 950))*alpha1^4 + (1/8*(2925*z^3 + 75*z^2 + 2925*z)*alpha2^4
    + 1/8*(2050*z^3 + 2775*z^2 + 2050*z)*alpha2^3 + 1/8*(2775*z^3 - 2050*z^2 +
    2775*z)*alpha2^2 + 1/8*(-75*z^3 + 2925*z^2 - 75*z)*alpha2 + 5375/8*z^2)*alpha1^3 +
    (1/8*(2500*z^3 + 3825*z + 3825)*alpha2^4 + 1/8*(2425*z^3 + 4300*z + 4300)*alpha2^3 +
    1/8*(-6175*z^3 - 1875*z - 1875)*alpha2^2 + 1/8*(5150*z^3 + 1325*z + 1325)*alpha2 +
    1/8*(-425*z^3 - 850*z - 850))*alpha1^2 + (1/8*(-6550*z^3 - 5575*z^2 - 5575*z -
    6550)*alpha2^4 + 1/8*(4775*z^3 + 1725*z^2 + 1725*z + 4775)*alpha2^3 + 1/8*(1325*z^3
    + 3050*z^2 + 3050*z + 1325)*alpha2^2 + 1/8*(-4600*z^3 + 975*z^2 + 975*z -
    4600)*alpha2 + 1/8*(3125*z^3 + 3125*z^2 + 3125*z + 3125))*alpha1 + (1/8*(3525*z^3 +
    3525*z^2 + 6900)*alpha2^4 + 1/8*(-5700*z^3 - 5700*z^2 - 10675)*alpha2^3 +
    1/8*(-4975*z^3 - 4975*z^2 + 725)*alpha2^2 + 1/8*(-3375*z^3 - 3375*z^2 + 150)*alpha2
    + 1/8*(2950*z^3 + 2950*z^2 + 1475)))*x + (1/4*(8625*z^2 + 62125*z +
    8625)*alpha2^4 + 1/4*(-12500*z^2 + 61875*z - 12500)*alpha2^3 + 1/4*(-61875*z^2 -
    12500*z - 61875)*alpha2^2 + 1/4*(62125*z^2 - 8625*z + 62125)*alpha2 + 1/4*(48750*z^2
    + 24375*z + 48750))*alpha1^4 + (1/4*(-625*z^3 - 54375*z^2 - 625*z)*alpha2^4 +
    1/4*(-62250*z^3 - 19875*z^2 - 62250*z)*alpha2^3 + 1/4*(-19875*z^3 + 62250*z^2 -
    19875*z)*alpha2^2 + 1/4*(54375*z^3 - 625*z^2 + 54375*z)*alpha2 - 56875/4*z^2)*alpha1^3 +
    (1/4*(43500*z^3 - 21125*z - 21125)*alpha2^4 + 1/4*(89875*z^3 + 58500*z +
    58500)*alpha2^3 + 1/4*(-27125*z^3 + 31375*z + 31375)*alpha2^2 + 1/4*(-85750*z^3 -
    64625*z - 64625)*alpha2 + 1/4*(-11875*z^3 - 23750*z - 23750))*alpha1^2 +
    (1/4*(28750*z^3 + 41875*z^2 + 41875*z + 28750)*alpha2^4 + 1/4*(-141875*z^3 -
    10625*z^2 - 10625*z - 141875)*alpha2^3 + 1/4*(-120625*z^3 - 131250*z^2 -
    131250*z - 120625)*alpha2^2 + 1/4*(55000*z^3 + 13125*z^2 + 13125*z + 55000)*alpha2 +
    1/4*(174375*z^3 + 174375*z^2 + 174375*z + 174375))*alpha1 + 1/4*(44375*z^3 +
    44375*z^2 + 117500)*alpha2^4 + 1/4*(12500*z^3 + 12500*z^2 + 59375)*alpha2^3 +
    1/4*(46875*z^3 + 46875*z^2 + 34375)*alpha2^2 + 1/4*(-73125*z^3 - 73125*z^2 -
    28750)*alpha2 + 1/4*(-58750*z^3 - 58750*z^2 - 29375)];

fivetorsion := {};
I := [0..4];
for k in I do for l in I do for m in I do for n in I do
  Include(~fivetorsion, k*T1_ + l*T2_ + m*T3_ + n*T4_);
end for; end for; end for; end for;

assert #fivetorsion eq 5^4;
assert {5*T_ : T_ in fivetorsion} eq {J_ ! 0};
